---
- name: "Build AWS Infra Using Ansible"
  hosts: localhost
  become: no
  vars:
    - region: "ap-south-1"
    - project: "ansible"
    - env: "build"
  vars_files:
    - aws_creds.yml
  tasks:
 
    - name: "Create SSH Key pair"
      amazon.aws.ec2_key:
        name: "{{ project }}-{{ env }}"
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
      register: key_build
 
    - name: "Save SSH Private Key" 
      when: key_build.changed
      copy:
        content: "{{ key_build.key.private_key }}"
        dest: "{{ project }}-{{ env }}.pem"
        mode: 0400
 
    - name: " Create Securtiy Group"
      amazon.aws.ec2_security_group:
        name: "{{ project }}-{{ env }}"
        description: "{{ project }}-{{ env }}"
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow all on port 80"
 
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow all on port 433"
 
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow all on port 22"
        tags:
          Name: "{{ project }}-{{ env }}"
          Project: "{{ project }}"
          Environment: "{{ env }}"
      register: sg_status

    - name: "Creating Ec2 Instance"
      amazon.aws.ec2_instance:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "server-{{ project }}-{{ env }}"
        key_name: "{{ key_build.key.name }}"
        instance_type: "t2.micro"
        security_groups:
          - "{{ sg_status.group_id }}"
        network:
          assign_public_ip: true
        image_id: "ami-01a4f99c4ac11b03c"
        exact_count: 1
        tags:
          Project: "{{ project }}"
          Environment: "{{ env }}"
      register: ec2_status

    - name: "Hold Ansible"
      wait_for:
        timeout: "60"

    - name: "Fetch instance details"
      when: ec2_status.changed
      amazon.aws.ec2_instance_info:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "server-{{ project }}-{{ env }}"
          "tag:Project": "{{ project }}"
          "tag:Environment": "{{ env }}"
          instance-state-name: [ "running" ]
      register: aws_instances

    - name: "Generate Dynamic Inventory"
      when: ec2_status.changed
      add_host:
        groups: "webserver"
        hostname: "{{ item.public_ip_address }}"
        ansible_ssh_user: "ec2-user"
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "ansible-build.pem"
        ansible_ssh_coomon_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ aws_instances.instances }}"

- name: "Deploy Website from GutHub"
  hosts: webserver
  become: true
  serial: 1
  vars:
    repo_url: "https://github.com/sreejithsasidharan1989/aws-elb-site.git"
    httpd_owner: "apache"
    httpd_group: "apache"
    httpd_port: "80"
    httpd_domain: "website.backtracker.tech"
    packages:
      - httpd
      - php
      - git
    clone_dest: "/tmp/website"
  tasks:
 
   - name: "Installing packages"
     yum:
       name: "{{ packages }}"
       state: present
     notify:
        - apache-reload
 
   - name: "Create httpd.conf file"
     template:
       src: "./httpd.conf.j2"
       dest: "/etc/httpd/conf/httpd.conf"
       owner: "{{ httpd_owner }}"
       group: "{{ httpd_group }}"
     notify:
        - apache-reload
 
   - name: "Deploy Virtualhost for {{ httpd_domain }}"
     template:
       src: "./virtual.conf.j2"
       dest: "/etc/httpd/conf.d/{{ httpd_domain }}.conf"
       owner: "{{ httpd_owner }}"
       group: "{{ httpd_group }}"
     notify:
       - apache-reload
 
   - name: "Create DocumentRoot for {{ httpd_domain }}"
     file:
       path: "/var/www/html/{{ httpd_domain }}"
       state: directory
       owner: "{{ httpd_owner }}"
       group: "{{ httpd_group }}"
 
   - name: "Create clone destination"
     file:
       path: "{{ clone_dest }}"
       state: directory
 
   - name: "Clone website files from {{ repo_url }}"
     git:
       repo: "{{ repo_url }}"
       dest: "{{ clone_dest }}"
     register: clone_status
     notify:
       - apache-restart
 
   - name: "Apply changes to {{ httpd_domain }} site files"
     when: clone_status.changed
     copy:
       src: "{{ clone_dest }}/"
       dest: "/var/www/html/{{ httpd_domain }}/"
       remote_src: true
     notify:
       - apache-restart
 
  handlers:
 
    - name: "apache-reload"
      service:
        name: httpd
        state: reloaded
        enabled: true
 
    - name: "apache-restart"
      service:
        name: httpd
        state: restarted
        enabled: yes
